package org.cit.CloudComputing;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClientBrowser.java
 *
 * Created on Aug 4, 2009, 11:58:51 AM
 */
import java.util.StringTokenizer;
import javax.swing.*;
import java.io.*;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import org.xml.sax.*;
import java.net.*;



/**
 *
 * @author Jaganathan,Ashok,Gokul,Zosangzeli
 */
public class ClientBrowser extends javax.swing.JFrame {

    public static ClientBrowser instance = null;
    public static JTextArea txtContent = null;
    public static String root_directory;
    public static String username;
    public static String mac_address;
    public static String info_string;

    /** Creates new form ClientBrowser */
    public ClientBrowser() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlServices = new javax.swing.JPanel();
        cmbServices = new javax.swing.JComboBox();
        lblServices = new javax.swing.JLabel();
        pnlInfo = new javax.swing.JPanel();
        lblAboutInfo = new javax.swing.JLabel();
        lblLicense = new javax.swing.JLabel();
        lblInfo = new javax.swing.JLabel();
        pnlComponents = new javax.swing.JPanel();
        pnlIO = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbIO = new javax.swing.JComboBox();
        lblIO = new javax.swing.JLabel();
        txtIO = new javax.swing.JTextField();
        btnDone = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlServices.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cmbServices.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "List of Services" }));
        cmbServices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbServicesActionPerformed(evt);
            }
        });
        cmbServices.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cmbServicesPropertyChange(evt);
            }
        });

        lblServices.setText("Select a service");

        javax.swing.GroupLayout pnlServicesLayout = new javax.swing.GroupLayout(pnlServices);
        pnlServices.setLayout(pnlServicesLayout);
        pnlServicesLayout.setHorizontalGroup(
            pnlServicesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServicesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlServicesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbServices, 0, 407, Short.MAX_VALUE)
                    .addComponent(lblServices, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlServicesLayout.setVerticalGroup(
            pnlServicesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServicesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblServices)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbServices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        pnlInfo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblAboutInfo.setText("About this software");

        lblLicense.setText("jLabel2");

        lblInfo.setText("jLabel2");

        javax.swing.GroupLayout pnlInfoLayout = new javax.swing.GroupLayout(pnlInfo);
        pnlInfo.setLayout(pnlInfoLayout);
        pnlInfoLayout.setHorizontalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAboutInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInfo)
                .addGap(220, 220, 220)
                .addComponent(lblLicense, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        pnlInfoLayout.setVerticalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAboutInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLicense)
                    .addComponent(lblInfo))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        lblAboutInfo.getAccessibleContext().setAccessibleName("About this software :");

        pnlComponents.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout pnlComponentsLayout = new javax.swing.GroupLayout(pnlComponents);
        pnlComponents.setLayout(pnlComponentsLayout);
        pnlComponentsLayout.setHorizontalGroup(
            pnlComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 862, Short.MAX_VALUE)
        );
        pnlComponentsLayout.setVerticalGroup(
            pnlComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 190, Short.MAX_VALUE)
        );

        pnlIO.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("I/O Panel");

        cmbIO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbIOActionPerformed(evt);
            }
        });

        txtIO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIOActionPerformed(evt);
            }
        });

        btnDone.setLabel("Save");
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlIOLayout = new javax.swing.GroupLayout(pnlIO);
        pnlIO.setLayout(pnlIOLayout);
        pnlIOLayout.setHorizontalGroup(
            pnlIOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlIOLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlIOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(cmbIO, javax.swing.GroupLayout.Alignment.TRAILING, 0, 522, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlIOLayout.createSequentialGroup()
                        .addGroup(pnlIOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblIO, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtIO, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(btnDone)
                        .addGap(290, 290, 290)))
                .addContainerGap())
        );
        pnlIOLayout.setVerticalGroup(
            pnlIOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlIOLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbIO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(lblIO, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlIOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDone, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlComponents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(pnlServices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlIO, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77)
                .addComponent(pnlComponents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlServices, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlIO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbServicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbServicesActionPerformed
        try {


            //System.out.println(cmbServices.getSelectedItem());


            if (cmbServices.getSelectedItem() != null) {
                if (((String) cmbServices.getSelectedItem()).equalsIgnoreCase(" 1.Open")) {
                    // TODO add your handling code here){
                    if (cmbIO.getItemCount() > 0) {
                        cmbIO.removeAllItems();
                    }
                    StringTokenizer st = new StringTokenizer(CloudClient.openService(), "\n");
                    while (st.hasMoreTokens()) {
                        cmbIO.addItem(st.nextToken());
                    }
                }



                if (((String) cmbServices.getSelectedItem()).equalsIgnoreCase(" 2.Save")) {

                    // TODO add your handling code here){
                    if (cmbIO.getItemCount() > 0) {
                        cmbIO.removeAllItems();
                    }

//                    cmbIO.addItem("Enter the name of the file below");
                    lblIO.setText("Filename : ");

                }


                if (((String) cmbServices.getSelectedItem()).equalsIgnoreCase(" 3.Close")) {

                    // TODO add your handling code here){
                    if (cmbIO.getItemCount() > 0) {
                        cmbIO.removeAllItems();
                    }
                    txtContent.setText("");

                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmbServicesActionPerformed

    private void cmbServicesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cmbServicesPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbServicesPropertyChange

    private void cmbIOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbIOActionPerformed
        if (cmbIO.getItemCount() > 0) {
            if (cmbIO.getItemAt(0).toString().equalsIgnoreCase("Select a file ") == true) {
                try {
                    txtContent.setText(CloudClient.openServiceSelectedFile(root_directory + "\\" + cmbIO.getSelectedItem().toString()));
                } catch (Exception e) {
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbIOActionPerformed

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed
        // TODO add your handling code here:

        if (txtIO.getText().equalsIgnoreCase("") == false && txtIO.getText() != null) {
            try {
                //jTextArea1.setText(CloudClient.openServiceSelectedFile(cmbIO.getSelectedItem().toString()));
                //  System.out.println("Ok.");
                CloudClient.saveSelectedFile(txtContent.getText(), root_directory + "\\" + txtIO.getText());

            } catch (Exception e) {
            }
        }


    }//GEN-LAST:event_btnDoneActionPerformed

    private void txtIOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIOActionPerformed

    public static boolean isLicenseOK(){

        
        File license = new File("Licence.xml");
        if (license.exists()) {
            /*Process XML file here*/



            try{
                int i=0,j=0;
                String machine_address="", file_machine_address="";
                NetworkInterface ni=NetworkInterface.getByInetAddress(InetAddress.getLocalHost());
                if(ni != null){
                    byte[] mac=ni.getHardwareAddress();
                    if(mac != null){
                        if(mac.length <= 0 ){
                            JOptionPane.showMessageDialog(new JPanel(), "No network interface card detected !");
                            System.exit(0);
                            return false;
                        }else{
                         for(i=0;i<mac.length;i++){
                               
                               machine_address=machine_address + String.format("%02X%s",mac[i],(i<mac.length-1)?"-":"");
                            
                            }
                        }
                    }else{
                        JOptionPane.showMessageDialog(new JPanel(), "No network interface card detected !");
                                                    System.exit(0);
                        return false;
                    }
                }else{
                    JOptionPane.showMessageDialog(new JPanel(), "No network interface card detected !");
                     System.exit(0);
                    //return false;
                     return true;
                }

                DocumentBuilderFactory doc=DocumentBuilderFactory.newInstance();
                DocumentBuilder docBuil=doc.newDocumentBuilder();
                Document licence=docBuil.parse(new File("Licence.xml"));
                Element root=licence.getDocumentElement();

                NodeList nl_user=root.getElementsByTagName("owner");
                if(nl_user != null && nl_user.getLength() >0){
                    Element el;
                    NodeList temp;
                    for(i=0;i<nl_user.getLength();i++){
                         el=(Element)nl_user.item(i);
                         temp=el.getElementsByTagName("username");
                         if(temp != null && temp.getLength()>0){
                             Element tempe=(Element)temp.item(0);
                             username=tempe.getFirstChild().getNodeValue();
                             root_directory=".\\users\\" + tempe.getFirstChild().getNodeValue();

                         }
                    }
                }


          
           nl_user=root.getElementsByTagName("owner");
                if(nl_user != null && nl_user.getLength() >0){
                    Element el;
                    NodeList temp;
                    for(i=0;i<nl_user.getLength();i++){
                         el=(Element)nl_user.item(i);
                         temp=el.getElementsByTagName("mac-address");
                         if(temp != null && temp.getLength()>0){
                             Element tempe=(Element)temp.item(0);
                             file_machine_address=tempe.getFirstChild().getNodeValue();
                         }
                    }
                }

       if(!machine_address.equalsIgnoreCase(file_machine_address)){
           JOptionPane.showMessageDialog(new JPanel(), "You are not licensed to use this software from this machine !");
            System.exit(0);
           //return false;
            return true;
       }

                NodeList nl=root.getElementsByTagName("java-application");
                NodeList nl1=root.getElementsByTagName("windows-application");

                WelcomeFrame.list_of_softwares=new Software[nl.getLength() + nl1.getLength()];

                if(nl!=null && nl.getLength()>0){
                    Element el;
                    NodeList temp;
                    String name=null, description=null, service_ip=null, service_port=null,command=null;
                    for(i=0;i<nl.getLength();i++){
                         el=(Element)nl.item(i);
                         temp=el.getElementsByTagName("name");
                         if(temp != null && temp.getLength()>0){
                             Element tempe=(Element)temp.item(0);
                             name=tempe.getFirstChild().getNodeValue();
                         }
                        temp=el.getElementsByTagName("description");
                         if(temp != null && temp.getLength()>0){
                             Element tempe=(Element)temp.item(0);
                             description=tempe.getFirstChild().getNodeValue();
                         }
                         temp=el.getElementsByTagName("service-ip");
                         if(temp != null && temp.getLength()>0){
                             Element tempe=(Element)temp.item(0);
                             service_ip=tempe.getFirstChild().getNodeValue();
                         }
                         temp=el.getElementsByTagName("service-port");
                         if(temp != null && temp.getLength()>0){
                             Element tempe=(Element)temp.item(0);
                             service_port=tempe.getFirstChild().getNodeValue();
                         }
                         temp=el.getElementsByTagName("command");
                         if(temp != null && temp.getLength()>0){
                             Element tempe=(Element)temp.item(0);
                             command=tempe.getFirstChild().getNodeValue();
                         }
                           WelcomeFrame.list_of_softwares[i]=new Software(name,description,command, service_ip,service_port,"JAR");
                    }
                }

                if(nl1!=null && nl1.getLength()>0){
                    Element el;
                    NodeList temp;
                    String name=null, description=null, service_ip=null, service_port=null,command=null;
                    for(j=0,i=nl.getLength();j<nl1.getLength();j++,i++){
                         el=(Element)nl1.item(j);
                         temp=el.getElementsByTagName("name");
                         if(temp != null && temp.getLength()>0){
                             Element tempe=(Element)temp.item(0);
                             name=tempe.getFirstChild().getNodeValue();
                         }
                        temp=el.getElementsByTagName("description");
                         if(temp != null && temp.getLength()>0){
                             Element tempe=(Element)temp.item(0);
                             description=tempe.getFirstChild().getNodeValue();
                         }
                         temp=el.getElementsByTagName("command");
                         if(temp != null && temp.getLength()>0){
                             Element tempe=(Element)temp.item(0);
                             command=tempe.getFirstChild().getNodeValue();
                         }
                        
                           WelcomeFrame.list_of_softwares[i]=new Software(name,description,command, service_ip,service_port,"EXE");
                    }
                }
            }
            catch(Exception e){
    e.printStackTrace();
}

            
            return true;
        }
        //return false;
        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {

                        CloudClient.begin();
                        CloudClient.dos.writeBytes(ClientBrowser.root_directory + "\n");
                        instance = new ClientBrowser();
                        instance.setVisible(true);
                        // Get Software Info
                        instance.lblInfo.setText(CloudClient.getInfo());
                        instance.lblLicense.setText(info_string);
                        //Get list of services
                        String[] services = CloudClient.listOfServices();
                        for (String cur_service : services) {
                            instance.cmbServices.addItem(cur_service);
                        }
                        // Get list of components

                        String[] components = CloudClient.listOfAvailableComponents();

                        for (String cur_component : components) {
                            if (cur_component.equalsIgnoreCase("textarea")) {
                                txtContent = new JTextArea();
                                txtContent.setColumns(100);
                                txtContent.setRows(26);
                                JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
                                jScrollPane1.setViewportView(txtContent);

                                javax.swing.GroupLayout pnlComponentsLayout = new javax.swing.GroupLayout(instance.pnlComponents);
                                instance.pnlComponents.setLayout(pnlComponentsLayout);
                                pnlComponentsLayout.setHorizontalGroup(
                                        pnlComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlComponentsLayout.createSequentialGroup().addGap(73, 73, 73).addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(308, Short.MAX_VALUE)));
                                pnlComponentsLayout.setVerticalGroup(
                                        pnlComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlComponentsLayout.createSequentialGroup().addGap(41, 41, 41).addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(94, Short.MAX_VALUE)));
                            }

                        }



                   
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDone;
    private javax.swing.JComboBox cmbIO;
    private javax.swing.JComboBox cmbServices;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblAboutInfo;
    private javax.swing.JLabel lblIO;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel lblLicense;
    private javax.swing.JLabel lblServices;
    public javax.swing.JPanel pnlComponents;
    private javax.swing.JPanel pnlIO;
    private javax.swing.JPanel pnlInfo;
    private javax.swing.JPanel pnlServices;
    private javax.swing.JTextField txtIO;
    // End of variables declaration//GEN-END:variables
}
