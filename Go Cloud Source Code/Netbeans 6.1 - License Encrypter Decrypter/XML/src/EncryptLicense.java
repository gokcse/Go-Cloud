
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import java.io.*;
import java.util.*;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import org.apache.crimson.tree.XmlDocument;
import java.security.*;
import javax.crypto.*;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EncryptLicense.java
 *
 * Created on Mar 12, 2010, 2:40:19 PM
 */

/**
 *
 * @author staff
 */
public class EncryptLicense extends javax.swing.JFrame {

    /** Creates new form EncryptLicense */
    public EncryptLicense() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        jLabel1 = new javax.swing.JLabel();
        txtFile = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        btnEncrypt = new javax.swing.JButton();
        btnDecrypt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label1.setText("Encrypt/Decrypt Licence ");

        jLabel1.setText("Select your licence file");

        txtFile.setEditable(false);

        btnBrowse.setText("Browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        btnEncrypt.setText("Encrypt");
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptActionPerformed(evt);
            }
        });

        btnDecrypt.setText("Decrypt");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnEncrypt)
                        .addGap(18, 18, 18)
                        .addComponent(btnDecrypt))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtFile, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnBrowse))))
                .addContainerGap(205, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowse))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEncrypt)
                    .addComponent(btnDecrypt))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
               // TODO add your handling code here
                chooseLicence=new JFileChooser();
                chooseLicence.showOpenDialog(this);
                txtFile.setText(chooseLicence.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
        // TODO add your handling code here:
        try{
                        FileInputStream fis = new FileInputStream(chooseLicence.getSelectedFile().getAbsolutePath());
			byte [] aFile = new byte [fis.available()];
			fis.read(aFile);
			// The source file is converted into a String.
			String aFileString = new String(aFile);
			// The XML Encrypted file string
			String aEncString = null;
			// The encryption key
			Key theKey = null;
			// Generating the key for encryption
			KeyGenerator KG = KeyGenerator.getInstance("DESede");
			theKey = (Key) KG.generateKey();


			// Creating a new XmlEncryption Object for encryption:
			XmlEncryption aXmlEnc = new XmlEncryption();
			// Setting the clear Document Object
			aXmlEnc.setClearDoc(aFileString);
			// Setting the encryption key
			aXmlEnc.setEncKey(theKey);
			// Setting the required algorithm
			aXmlEnc.setAlgoName("DESede");
			// Setting the name of the encryption key
			aXmlEnc.setKeyName("theKey");
			// Setting the EncryptedData tag ID
			aXmlEnc.setEncId("Test");
			// Selecting the XML Encryption method
                        aEncString = aXmlEnc.encryptCompleteXmlFile();
                        byte[] aToFile = aEncString.getBytes();
                        FileOutputStream aFOS = new FileOutputStream("EncryptedLicence.xml");
			aFOS.write(aToFile);
			aFOS.close();
                        chooseLicence.getSelectedFile().delete();
                        FileOutputStream keyFOS = new FileOutputStream("theKey");
			keyFOS.write(theKey.getEncoded());
			keyFOS.close();
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnEncryptActionPerformed

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        // TODO add your handling code here:
                 String bEncString = null;
		// The decrypted file String
		String bFileString = null;
		// Reading the XML Encrypted file from disk.
		try {
			FileInputStream bFIS = new FileInputStream(chooseLicence.getSelectedFile().getAbsolutePath());
			byte[] bFromFile = new byte[bFIS.available()];
			bFIS.read(bFromFile);
			// Converting the XML Encrypted file to String
			bEncString = new String(bFromFile);
			bFIS.close();
		}//try
		catch(Exception e) {
			e.printStackTrace();
		}//catch

		// Printing the received XML Encrypted file to the console:
		System.out.println("Order.xml AS VIEWED BY THE SALES DEPARTMENT:\n\n"
			+bEncString);
		// Creating a new XmlEncryption Object for decryption
		XmlEncryption bXmlEnc = new XmlEncryption();
		// Decrypting the XML Encrypted file String
		bFileString = bXmlEnc.getDecryptedData(bEncString);
                System.out.println(
			"Order.xml AS VIEWED BY THE ACCOUNTS DEPARTMENT:\n\n"+bFileString);
                try{
                FileWriter fw=new FileWriter(new File("Licence.xml"));
                fw.write(bFileString);
                fw.close();
                chooseLicence.getSelectedFile().delete();
                }catch(Exception e){
                    e.printStackTrace();
                }

    }//GEN-LAST:event_btnDecryptActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EncryptLicense().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JLabel jLabel1;
    private java.awt.Label label1;
    private javax.swing.JTextField txtFile;
    // End of variables declaration//GEN-END:variables
    private  JFileChooser chooseLicence;
}
